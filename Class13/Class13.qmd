---
title: "Class 13: RNA Seq (pt.1)"
author: "Keilyn Duarte (PID A16881868)"
format: pdf
---

Installed packages `BiocManager` and `DESeq2`

```{r}
library(DESeq2)
```

Today we will analyze data from a published RNA-seq experiment where airway smooth muscle cells were treated with decamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

## Import countData and colData

There are two datasets I need to import/read

- `countData` the transcript counts per gene (rows) in the different experiments
- `colData` information (aka metadata) about the columns (i.e. experiments) in `countData`.

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

Let's look at some of these datasets with `head()`

```{r}
head(counts)
head(metadata)
```

> Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```

> Q2. How many ‘control’ cell lines do we have? 

```{r}
sum (metadata$dex == "control")
```

We can find the average (mean) count values per gene for all "control" experiments and compare it to the mean values for "treated".

- Extract all "control" columns
```{r}
control.inds <- metadata$dex == "control"
control.counts <- counts[ ,control.inds]
head(control.counts)
```

- Find the row wise mean value for each gene in these columns
```{r}
control.mean <- rowSums(control.counts)/4
head(control.mean)
```
> Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

You can make the number of columns a vector, so that it can be changed depending on the number of experiments

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

- Extract all "treated" columns
```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[ ,treated.inds]
head(treated.counts)
```

- Find the row wise mean value for each gene in these columns
```{r}
treated.mean <- rowSums(treated.counts)/4
head(treated.mean)
```

Let's put these two mean values together for easy book-keeping
```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples.

Let's have a look - i.e. plot control.mean vs. treated.mean
```{r}
plot(meancounts)
```

> (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

```{r}
library(ggplot2)

ggplot(meancounts) +
  aes(control.mean, treated.mean) +
  geom_point(alpha=0.3)
```

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

Whenever we see data that is so heavily skewed like this, we often log transform it so we can see what is going on more easily. 

```{r}
plot(meancounts, log="xy")
```

We most often work in log2 units as this makes the math easier. Let's have a play to see this

```{r}
# treated / control
log2(20/20)
```

```{r}
log2(40/20)
```

```{r}
log2(80/20)
```

```{r}
log2(20/40)
```

A positive value indicates that there was an increase in gene expression once treated, and a negative value indicates that there was a decrease in gene expression once treated.

We can now add "log2 fold-change" values to our `meancounts` dataset.

```{r}
# Adding a column `log2fc` to the `meancounts` dataset (using the $ sign)
meancounts$log2fc <- log2 (meancounts$treated.mean / meancounts$control.mean)

head(meancounts)
```

We need to filter out zero count genes - i.e. remove the rows (genes) that have a 0 value in either control or treated means.

> Q7. What is the purpose of the arr.ind argument in the which() function call below? Why would we then take the first column of the output and need to call the unique() function?

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=T)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

The arr.ind argument recalls only rows and columns from the meancounts that are TRUE for having zero values. The unique function makes sure that there's no repeats if there are multiple TRUE / zeros in any of the columns for that row.

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

How many genes are "up" regulated at the common log2 fold-change threshold of +2.

```{r}
up.inds <- meancounts$log2fc >= 2
sum(up.inds, na.rm=T)
```

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

How many genes are "down" regulated at the threshold of -2

```{r}
down.inds <- meancounts$log2fc <= -2
sum(down.inds, na.rm=T)
```

> Q10. Do you trust these results? Why or why not?

Not yet, because we have to evaluate the statistical significance first.

## DESeq2

To do this the right way we need to consider the significance of the differences, not just their magnitude

```{r}
#/ message: false
library(DESeq2)
```

To use this package, it wants countData and colData in a specific format.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = metadata,
                              design = ~dex)
```

```{r}
dds <- DESeq(dds)
```

Extract my results
```{r}
res <- results(dds)
head(res)
```
Plot of fold-change vs P-value (adjusted for multiple testing)
```{r}
plot(res$log2FoldChange, res$padj)
```

Take the log of the P-value
```{r}
plot(res$log2FoldChange, log(res$padj))
```

We can just flip the axis to see better 
```{r}
plot(res$log2FoldChange, -log(res$padj),
    xlab = "Log2 Fold-change",
    ylab = "-log(P-value)" )
```

Let's save our work to date

```{r}
write.csv(res, file="myresults.csv")
```

To finish off, let's make a nicer volcano plot.

- Add the log2 threshold lines of +2 and -2
- Add p-value treshold lines at 0.05
- Add color to highlight the subset of genes that meet both of the above thresholds.

Make mycols vector for the plot
```{r}
# Replicate gray with `rep()` by the number of rows in `res`
mycols <- rep("gray", nrow(res))
# If log2FoldChange in res is more than or equal to 2, make the color red
mycols[ abs(res$log2FoldChange) >= 2 ]  <- "red" 
# If log2FoldChange in res is less than or equal to -2, make the color blue
mycols[res$log2FoldChange <= -2] <- "blue"
#If the padjusted value is higher than 0.05, make the color black
mycols[res$padj > 0.05] <- "black"

```

Make it with ggplot:
```{r}
ggplot(res) +
  aes(log2FoldChange, -log(padj)) +
  geom_point(alpha = 0.3, col=mycols) +
  geom_vline(xintercept=c(-2,2), col="red") +
  geom_hline(yintercept= -log(0.05), col="red") +
  labs(title="Volcano Plot")

```

## Add gene annotation data

Now the question is what are the blue and red points in the above volcano plot - i.e. what are the genes most influenced by drug treatment?

We will use some BioConductor packages to "map" the ENSEMBLE ids to more useful gene SYMBOL names/ids. 

We can install these packages with `BiocManager::install("AnnotationDbi")`

```{r}
library("AnnotationDbi")
library(org.Hs.eg.db)
```

What database identifiers can I translate between here:

```{r}
columns(org.Hs.eg.db)
```

We can now use the `mapIDs()` function to translate/map between these different identifier formats

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
       keys = rownames(res),
       keytype = "ENSEMBL",
       column = "SYMBOL")

res$genename <- mapIds(org.Hs.eg.db,
       keys = rownames(res),
       keytype = "ENSEMBL",
       column = "GENENAME")

res$entrez <- mapIds(org.Hs.eg.db,
       keys = rownames(res),
       keytype = "ENSEMBL",
       column = "ENTREZID")
```

## Pathway Analysis

Now I know the gene names and their IDs in different databases. I want to know what type of biology they are involved in...

This is the job of "pathway analysis" (aka "gene set enrichment")

There are tons of different BioConductor packages for pathway analysis. Here we use just one of them called **gage** and **pathview**. I will install these packages with `BiocManager::install(c("gage", "pathview","gageData"))`

```{r}
library(gage)
library(gageData)
library(pathview)
```

Load up the datasets
```{r}
data(kegg.sets.hs)
```

```{r}
head(kegg.sets.hs, 2)
```

We will use these KEGG genesets (aka pathways) and our `res` results to see what overlaps. To do this we will use the `gage()` function.

For input `gage()` wants just a vector of importance - in our case Foldchange values. 

```{r}
foldchanges <- res$log2FoldChange
```

Vectors in R can have "names" that are useful for bookkeeping, so we know what a given value corresponds to.

Lets put names on our `foldchanges` vector - here we will use `res$entrez`

```{r}
names(foldchanges) <- res$entrez
```

Now we can run "pathway analysis"

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
head(keggres$less)
```

We can get a pathway image file with our genesets highlighted via the `pathview()` function.

```{r}
pathview(foldchanges, pathway.id="hsa05310")
```

Insert this figure in my report

![](hsa05310.pathview.png)

