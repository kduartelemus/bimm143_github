---
title: "Lab 5: Data Viz with ggplot"
author: "Keilyn Duarte (A16881868)"
format: pdf
---

## Intro to ggplot

> Q1. For which phases is data visualization important in our scientific workflows? 

All of the above

> Q2. True or False? The ggplot2 package comes already installed with R? 

FALSE

> Q. Which plot types are typically NOT used to compare distributions of numeric variables? 

Network graphs

> Q. Which statement about data visualization with ggplot2 is incorrect? 

ggplot2 is the only way to create plots in R


There are many graphics systems in R (ways to make plots and figures). These include "base" R plots. Today we will focus mostly on the **gplot2** package.

Let's start with a plot of a simple in-built dataset called `cars`

```{r}
head(cars)
```

```{r}
plot(cars)
```

Let's see how we can make this figure using **ggplot**. First I need to install this package on my computer. To install any R package I use the function `install.packages()`

> I will run \`install.packages("ggplot2") in my R console, not this quarto document.

Before I can use any functions from add on packages I need to load the package from my "library()" with the `library(ggplot2)` call.

```{r}
library(ggplot2)
ggplot(cars)
```

All ggplot figures have at least 3 things (called layers). These include:

-   **data** (the input dataset I want to plot from)
-   **aes** (the aesthetic mapping of my data to my plot)
-   **geoms** (the geom_point(), geom_line() etc. that I want to draw.)

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_point()
```

Let's add a line to show the relationship here:

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(method="lm") +
  theme_bw() +
  labs(title="My first GGPLOT")

```

> Q1 Which geometric layer should be used to create scatter plots in ggplot2?

geom_point()

## Gene expression figure

The code to read the dataset

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

> How many genes are in this dataset?

```{r}
nrow(genes)
```

> Q. Use the colnames() function and the ncol() function on the genes data frame to find out what the column names are (we will need these later) and how many columns there are. How many columns did you find?

```{r}
colnames(genes)

ncol(genes)
```

> Q. Use the table() function on the state column of this data.frame to find out how many 'up' regulated genes there are. What is your answer?

```{r}
table(genes$State)
```

> Q. Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset?

```{r}
round( table(genes$State)/nrow(genes), 4)
```

The code above and below are 2 ways of doing the same thing.

```{r}
n.tot<- nrow(genes)
vals<- table(genes$State)

vals.percent<- vals/n.tot * 100
round(vals.percent, 2)
```

**A first plot of this dataset**

```{r}
ggplot(genes) +
  aes(x=Condition1, y=Condition2, col=State) +
  geom_point() +
  scale_colour_manual( values=c("blue","gray","red") ) +
  labs(title="Gene expression change upon Drug Treatment", 
       x= "Control Expression", 
       y= "Drug Presence Expression") +
  theme_linedraw()
```

```{r}
p <- ggplot(genes) +
    aes(x=Condition1, y=Condition2, col=State) +
   geom_point()
```

```{r}
p + theme_minimal()
```

## Combining plots with patchwork

```{r}
library(patchwork)

# Setup some example plots 
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec))
p4 <- ggplot(mtcars) + geom_bar(aes(carb))

# Use patchwork to combine them here:
(p1 | p2 | p3) /
      p4
```

## Exploring the gapminder dataset

The gapminder dataset contains economic and demographic data about various countries since 1952.

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)

head(gapminder)
```

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.2)
  
```

```{r}
# install.packages("dplyr")  ## un-comment to install if needed
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)
```

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.5)
```

```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, color = pop) +
  geom_point(alpha=0.8)
```

```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, size = pop) +
  geom_point(alpha=0.5)
```

```{r}
ggplot(gapminder_2007) + 
  geom_point(aes(x = gdpPercap, y = lifeExp,
                 size = pop), alpha=0.5) + 
  scale_size_area(max_size = 10)
```

> Q. Can you adapt the code you have learned thus far to reproduce our gapminder scatter plot for the year 1957? What do you notice about this plot is it easy to compare with the one for 2007?

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)

ggplot(gapminder_1957) + 
  aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop) +
  geom_point(alpha=0.7) + 
  scale_size_area(max_size = 10) 
```

```{r}

gapminder_1957 <- gapminder %>% filter(year==1957 | year==2007)

ggplot(gapminder_1957) + 
  geom_point(aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop), alpha=0.7) + 
  scale_size_area(max_size = 10) +
  facet_wrap(~year)
```

# Animation was deleted because it was making a lot of pages (instructed to remove by the professor)

