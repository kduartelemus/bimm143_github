---
title: "Class 14: RNA-Seq analysis mini-project"
author: "Keilyn Duarte (PID A16881868)"
format: pdf
toc: true
---

## Background 

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

> Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1. Their results and others indicate that HOXA1 is required for lung fibroblast and HeLa cell cycle progression. In particular their analysis show that "loss of HOXA1 results in significant expression level changes in thousands of individual transcripts, along with isoform switching events in key regulators of the cell cycle". For our session we have used their Sailfish gene-level estimated counts and hence are restricted to protein-coding genes only.

## Data Import

```{r}
counts <- read.csv("GSE37704_featurecounts.csv", row.names=1)
colData <- read.csv("GSE37704_metadata.csv")
```

## Inspect and Tidy data

Do the `counts` columns match the `colData` rows?

```{r}
head(counts)
```

```{r}
head(colData)
```

The `counts` data set's columns doesn't exactly match the rows of the `colData` dataset, we need to remove the `length` column to fix that.

The fix here seems to be removing the first column from counts

> Q. Complete the code below to remove the troublesome first column from countData

```{r}
# Note we need to remove the odd first $length col
countData <- counts[,-1]
head(countData)
```

Check for matching countData and colData
```{r}
colnames(countData) == colData$id
```

> Q1. How many genes are in countData?

```{r}
nrow(countData)
```


> Q2. Filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns). How many genes are left?

```{r}
to.keep.inds <- rowSums(countData) > 0
```

```{r}
new.counts <- countData[to.keep.inds, ]
```

```{r}
nrow(new.counts)
```


## Setup for DESeq

```{r}
#| message: false
library(DESeq2)
```

Setup input object for DESeq
```{r}
dds <- DESeqDataSetFromMatrix(countData = new.counts,
                              colData = colData,
                              design = ~condition)
```

## Run DESeq

```{r}
dds <- DESeq(dds)
res <- results(dds)
```
```{r}
head(res)
```

## Volcano Plot of results

```{r}
library(ggplot2)
```

```{r}
# Make a color vector for all genes
mycols <- rep("gray", nrow(res))

# Color red the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2 ] <- "red"

# Color blue those with adjusted p-value less than 0.01
#  and absolute fold change more than 2
inds <- (abs(res$log2FoldChange < 0.01)) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"
```

```{r}
ggplot(res) +
  aes(log2FoldChange, -log(padj)) +
  geom_point(alpha=0.3, col=mycols) +
  geom_vline(xintercept=c(-2,2), col="red") +
  geom_hline(yintercept=0.05, col="red")
```

## Gene annotation

> Q. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)

res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res, 10)
```

```{r}
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```

## Pathway analysis

```{r}
library(gage)
library(gageData)
library(pathview)
```

```{r}
data(kegg.sets.hs)
data(sigmet.idx.hs)

kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

head(kegg.sets.hs, 3)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Run pathway analysis with KEGG
```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

Cell cycle figure
```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

![](hsa04110.pathview.png)

## Gene ontology analysis

Run pathway analysis with GO
```{r}
data(go.sets.hs)

gobpres = gage(foldchanges, gsets=go.sets.hs)

```

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

head(gobpres$less)
```
